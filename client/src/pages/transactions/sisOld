import React, { useEffect, useState, useCallback, useRef } from "react";
import PageHeader from "../../common/components/PageHeader";
import ProductCard from "../../common/components/ProductCard";
import { MinusCircle, PlusCircle, Trash2 } from "lucide-react";
import { useInventoryStore } from "../../stores/useInventoryStore";
import HorizontalScrollContainer from "../../common/components/HorizontalScrollContainer";
import { motion, AnimatePresence } from "framer-motion";
import { useDispatchStore } from "../../stores/useDispatchStore";
import LocationToggle from "../../common/components/LocationToggle";
import { debounce } from "lodash";
import { Loader2 } from "lucide-react";
import { Tooltip } from "antd";
import { useAuthStore } from "../../stores/useAuthStore";

const SIS = () => {
  const [quantity, setQuantity] = useState({});
  const [items, setItems] = useState([]);
  const [products, setProducts] = useState([]);
  const [activeCategory, setActiveCategory] = useState("All");
  const [hoveredRow, setHoveredRow] = useState(null);
  const [search, setSearch] = useState("");
  const [location, setLocation] = useState("Port Harcourt");
  const [currentPage, setCurrentPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [currentID, setCurrentID] = useState("");
  const [allDispatchedItems, setAllDispatchedItems] = useState([]);
  const [vesselList, setVesselList] = useState([]);
  const [departmentList, setDepartmentList] = useState([]);
  const itemsPerPage = 100;
  const categoryScrollRef = useRef(null);
  const { username, user_id } = useAuthStore();

  const {
    vessels,
    departments,
    fetchLocations,
    fetchVessels,
    fetchDepartments,
    addDispatchRecord,
    fetchAllDispatchRecords,
    fetchAllDispatchedItems,
  } = useDispatchStore();

  const {
    fetchAllCategories,
    fetchInventoryByCategory,
    allCategories,
    inventory,
    fetchAllInventory,
  } = useInventoryStore();

  const [formData, setFormData] = useState({
    user_id: user_id,
    destination_type: "",
    destination_id: "",
    date: new Date().toISOString().split("T")[0],
    ref_number: "",
    notes: "",
    dispatch: [],
  });

  const addInventory = (id) => {
    const product = products.find((p) => p.stock_id === id);
    if (!product) return;

    setItems((prev) => {
      const exists = prev.find((item) => item.stock_id === id);
      if (exists) return prev;
      return [...prev, product];
    });

    setFormData((prev) => ({
      ...prev,
      dispatch: [
        ...prev.dispatch,
        {
          stock_id: product.stock_id,
          item_id: product.item_id,
          quantity: 1,
          location: location,
          remarks: "",
        },
      ],
    }));

    setQuantity((prev) => ({
      ...prev,
      [id]: (prev[id] || 0) + 1,
    }));
  };

  const increaseQuantity = (id) => {
    setQuantity((prev) => ({
      ...prev,
      [id]: (prev[id] || 0) + 1,
    }));
    setFormData((prev) => {
      const updatedDispatch = prev.dispatch.map((item) => {
        if (item.stock_id === id) {
          return { ...item, quantity: item.quantity + 1 };
        }
        return item;
      });
      return { ...prev, dispatch: updatedDispatch };
    });
  };

  const decreaseQuantity = (id) => {
    setQuantity((prev) => {
      const current = prev[id] || 0;
      if (current <= 1) {
        const updatedItems = items.filter((item) => item.stock_id !== id);
        setItems(updatedItems);
        const newQty = { ...prev };
        delete newQty[id];
        return newQty;
      }
      return { ...prev, [id]: current - 1 };
    });
    setFormData((prev) => {
      const updatedDispatch = prev.dispatch.map((item) => {
        if (item.stock === id) {
          return { ...item, quantity: item.quantity - 1 };
        }
        return item;
      });
      return { ...prev, dispatch: updatedDispatch };
    });
  };

  const removeItem = (id) => {
    setItems((prev) => prev.filter((item) => item.stock_id !== id));
    setQuantity((prev) => {
      const newQty = { ...prev };
      delete newQty[id];
      return newQty;
    });
    setFormData((prev) => ({
      ...prev,
      dispatch: prev.dispatch.filter((item) => item.stock_id !== id),
    }));
  };

  // Fetch All Inventory, vessels, locations, departments, categories
  useEffect(() => {
    const fetchData = async () => {
      await fetchAllCategories();
    };
    fetchData();
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      const data = await fetchAllInventory();
      const filteredData = data.filter(
        (item) =>
          item.location?.toString().toLowerCase() === location.toLowerCase()
      );
      setProducts(filteredData);

      setCurrentPage(1);

      await fetchLocations();
      const fetchedVessels = await fetchVessels();
      const fetchedDepartments = await fetchDepartments();

      const vessel_list = fetchedVessels.map((vessel) => ({
        value: vessel.vessel_id,
        label: vessel.vessel_name,
      }));
      setVesselList(vessel_list);

      const department_list = fetchedDepartments.map((department) => ({
        value: department.department_id,
        label: department.department_name,
      }));
      setDepartmentList(department_list);
      const fetchedDispatchItems = await fetchAllDispatchedItems();
      setAllDispatchedItems(fetchedDispatchItems);

      const startTime = Date.now();
      const elapsed = Date.now() - startTime;
      const remainingTime = 2000 - elapsed;
      if (remainingTime > 0) {
        await new Promise((res) => setTimeout(res, remainingTime));
      }
      setLoading(false);
    };
    fetchData();
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      const res = await fetchAllDispatchRecords();
      setCurrentID(res[0]["dispatch_id"] + 1);
    };
    fetchData();
  }, [products]);

  // End of Use Effects

  const handleCategoryChange = async (
    category,
    overrideLocation = location,
    setCategory = true
  ) => {
    if (setCategory) {
      setActiveCategory(category);
    }
    setCurrentPage(1);

    const filterByLocation = (items) => {
      return items.filter(
        (item) =>
          item.location?.toString().toLowerCase() ===
          overrideLocation.toString().toLowerCase()
      );
    };

    const filterBySearch = (items) => {
      const s = search.toLowerCase().trim();
      if (!s) return items;

      return items.filter(
        (item) =>
          (item.name?.toLowerCase().includes(s) ?? false) ||
          (item.part_number?.toLowerCase().includes(s) ?? false)
      );
    };

    let baseItems;

    if (category === "All") {
      baseItems = inventory;
    } else {
      baseItems = await fetchInventoryByCategory(category);
    }

    const filtered = filterBySearch(filterByLocation(baseItems));
    setProducts(filtered);
  };

  const debouncedSearch = useCallback(
    debounce((value) => {
      const s = value.toLowerCase();
      const filteredItems = inventory.filter((item) => {
        const matchesSearch =
          (item.name?.toLowerCase().includes(s) ?? false) ||
          (item.part_number?.toLowerCase().includes(s) ?? false);

        const matchesLocation =
          item.location?.toString().toLowerCase() === location.toLowerCase();

        return matchesSearch && matchesLocation;
      });

      setProducts(filteredItems);
      setCurrentPage(1);
    }, 300),
    [inventory, location]
  );

  const handleSubmit = async () => {
    if (
      !formData.destination_type ||
      !formData.destination_id ||
      !formData.date ||
      items.length === 0
    ) {
      alert("Please fill in all required fields and add items to dispatch.");
      return;
    }
    await addDispatchRecord(formData);

    setItems([]);
    setQuantity({});
    setFormData({
      user_id: 3,
      destination_type: "",
      destination_id: "",
      date: new Date().toISOString().split("T")[0],
      ref_number: "",
      notes: "",
      dispatch: [],
    });

    // ðŸ”„ Refetch inventory for current location
    const data = await fetchAllInventory();
    const filteredData = data.filter(
      (item) =>
        item.location?.toString().toLowerCase() === location.toLowerCase()
    );
    setProducts(filteredData);
    setCurrentPage(1);
    setActiveCategory("All");

    // Scroll to the beginning
    if (categoryScrollRef.current) {
      categoryScrollRef.current.scrollToStart();
    }
  };

  const paginatedProducts = products.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const getLocationSummary = (items) => {
    const locationCounts = items.reduce((acc, item) => {
      const loc = item.location;
      acc[loc] = (acc[loc] || 0) + 1;
      return acc;
    }, {});

    const locations = Object.keys(locationCounts);

    if (locations.length === 1) {
      // Only one location
      return locations[0];
    }

    // Multiple locations â€” return with counts
    return (
      locations.map((loc) => `${loc} (${locationCounts[loc]})`).join(", ") ||
      "N/A"
    );
  };

  return (
    <div>
      {/* <PageHeader title="Stock Issuance System" /> */}
      <div className="grid grid-cols-2 rounded-lg bg-white h-[calc(100vh-80px)]">
        {/* First Column */}
        <div className="px-6 pb-6 border-r border-gray-200 overflow-y-scroll menu">
          <div className="flex justify-end py-3">
            <LocationToggle
              value={location}
              onChange={(newLoc) => {
                setLocation(newLoc);
                handleCategoryChange(activeCategory, newLoc);
              }}
            />
          </div>
          <div className="flex justify-between">
            <div>
              <h2 className="text-xl font-semibold text-gray-800">
                Welcome, {username}
              </h2>
              <p className="text-sm text-gray-500 mb-4">December 24, 2024</p>
            </div>
            <div>
              <input
                type="text"
                placeholder="âŒ• Search"
                className="text-sm px-3 py-1.5 rounded-md border border-gray-200 bg-white text-black placeholder:text-gray-400 font-medium tracking-wide"
                onChange={(e) => {
                  setSearch(e.target.value);
                  debouncedSearch(e.target.value);
                }}
                value={search}
              />
            </div>
          </div>

          <div className="flex space-x-4 mb-6 pb-1">
            <HorizontalScrollContainer
              activeIndex={allCategories.findIndex(
                (cat) => cat.name === activeCategory
              )}
              ref={categoryScrollRef}
            >
              <button
                className={`px-4 py-1.5 rounded-full text-sm cursor-pointer ${
                  activeCategory === "All"
                    ? "bg-black text-white"
                    : "bg-gray-100 text-gray-800 hover:bg-gray-200 transition-all duration-300"
                }`}
                onClick={() => handleCategoryChange("All")}
              >
                All
              </button>
              <button
                className={`px-4 py-1.5 rounded-full text-sm cursor-pointer bg-gray-100 text-gray-800 hover:bg-gray-200 transition-all duration-300`}
              >
                Popular
              </button>
              {allCategories.map((cat, i) => (
                <button
                  key={i}
                  className={`px-4 py-1.5 rounded-full text-sm text-nowrap cursor-pointer ${
                    activeCategory === cat.name
                      ? "bg-black text-white"
                      : "bg-gray-100 text-gray-800 hover:bg-gray-200 transition-all duration-300"
                  }`}
                  onClick={() => handleCategoryChange(cat.name)}
                >
                  {cat.name}
                </button>
              ))}
            </HorizontalScrollContainer>
          </div>

          {loading ? (
            <div className="flex justify-center items-center py-10">
              <Loader2 className="h-6 w-6 animate-spin text-gray-500" />
              <span className="ml-2 text-sm text-gray-600">Processing...</span>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 select-none">
              {paginatedProducts.length === 0 ? (
                <span className="text-gray-500 col-span-4 text-center py-4">
                  No items found in this category
                </span>
              ) : (
                paginatedProducts.map((item, i) => (
                  <motion.div
                    key={i}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: i * 0.05 }}
                  >
                    <ProductCard
                      key={i}
                      name={item.name}
                      icon={item.category}
                      quantity={item.quantity}
                      part_number={item.part_number}
                      on_click={() => addInventory(item.stock_id)}
                      selected={items.some((i) => i.stock_id === item.stock_id)}
                      on_remove={() => removeItem(item.stock_id)}
                    />
                  </motion.div>
                ))
              )}
            </div>
          )}
        </div>

        {/* Second Column */}
        <div className="w-full overflow-y-scroll menu">
          <div className="space-y-2 p-6 border-b border-gray-200">
            <div className="bg-[#f9fafc] p-3 rounded-lg border border-gray-200">
              <h3 className="text-lg font-semibold">Dispatch List</h3>
              <p className="text-sm text-gray-500">{`Transaction ID : SSL/DR/${currentID} `}</p>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="flex flex-col">
                <label className="mb-1">
                  Date <span className="text-red-500">*</span>
                </label>
                <input
                  type="date"
                  className="w-full border border-gray-200 p-1.5 rounded"
                  value={formData.date}
                  onChange={(e) => {
                    setFormData((prev) => ({
                      ...prev,
                      date: e.target.value,
                    }));
                  }}
                />
              </div>
              <div>
                <label className="mb-1">Ref Number</label>
                <input
                  type="text"
                  className="w-full border border-gray-200 p-1.5 rounded"
                  value={formData.ref_number}
                  onChange={(e) => {
                    setFormData((prev) => ({
                      ...prev,
                      ref_number: e.target.value,
                    }));
                  }}
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="mb-1">
                  Vessel/Department <span className="text-red-500">*</span>
                </label>
                <select
                  className="w-full border border-gray-200 p-1.5 rounded"
                  value={formData.destination_type}
                  onChange={(e) => {
                    setFormData((prev) => ({
                      ...prev,
                      destination_type: e.target.value,
                    }));
                  }}
                >
                  <option value="">Select</option>
                  <option value="vessel">Vessel</option>
                  <option value="department">Department</option>
                </select>
                {/* <CommonSelect
                  options={[
                    { value: "vessel", label: "Vessel" },
                    {
                      value: "department",
                      label: "Department",
                    },
                  ]}
                  className="w-full border border-gray-200 p-1.5 rounded"
                  value={formData.destination_type}
                  onChange={(e) => {
                    setFormData((prev) => ({
                      ...prev,
                      destination_type: e.value,
                    }));
                  }}
                  placeholder="Vessel/Department"
                  filter={false}
                /> */}
              </div>
              <div>
                <label className="mb-1">
                  Destination <span className="text-red-500">*</span>
                </label>
                {/* Vessel or Department based on selection */}
                {formData.destination_type === "vessel" ? (
                  <select
                    className="w-full border border-gray-200 p-1.5 rounded"
                    value={formData.destination_id}
                    onChange={(e) => {
                      setFormData((prev) => ({
                        ...prev,
                        destination_id: e.target.value,
                      }));
                    }}
                  >
                    <option value="">Select Vessel</option>
                    {vessels.map((vessel) => (
                      <option key={vessel.vessel_id} value={vessel.vessel_id}>
                        {vessel.vessel_name}
                      </option>
                    ))}
                  </select>
                ) : (
                  <select
                    className="w-full border border-gray-200 p-1.5 rounded"
                    value={formData.destination_id}
                    onChange={(e) => {
                      setFormData((prev) => ({
                        ...prev,
                        destination_id: e.target.value,
                      }));
                    }}
                  >
                    <option value="">Select Department</option>
                    {departments.map((department) => (
                      <option
                        key={department.department_id}
                        value={department.department_id}
                      >
                        {department.department_name}
                      </option>
                    ))}
                  </select>
                )}
              </div>
            </div>
            <div className="col-span-3">
              <label className="mb-1">Notes</label>
              <textarea
                className="w-full border border-gray-200 p-1.5 rounded"
                rows="2"
                placeholder="Add any additional notes here..."
                value={formData.notes}
                onChange={(e) => {
                  setFormData((prev) => ({
                    ...prev,
                    notes: e.target.value,
                  }));
                }}
              ></textarea>
            </div>
          </div>

          <div className="bg-gradient-to-b from-[#f8f8f8] to-[#fefefe] p-6 border-b border-gray-200">
            <h4 className="font-semibold ml-5 text-gray-800 mb-2">
              Dispatch Details
            </h4>
            <div className="space-y-4">
              <table className="min-w-full table-fixed text-left border-separate border-spacing-y-2 border-spacing-x-5 text-sm">
                <thead>
                  <tr>
                    <th>Item Description</th>
                    <th>Part Number</th>
                    <th>Quantity</th>
                    <th>Location</th>
                    <th>Remark</th>
                    <th></th>
                  </tr>
                </thead>
                <tbody>
                  <AnimatePresence>
                    {items.map((item, i) => (
                      <motion.tr
                        key={item.stock_id}
                        className="text-left align-top"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        transition={{ duration: 0.2 }}
                      >
                        <td className="align-middle">
                          <div
                            className="relative w-[150px]"
                            onMouseEnter={() => setHoveredRow(item.stock_id)}
                            onMouseLeave={() => setHoveredRow(null)}
                          >
                            <span className="truncate block cursor-pointer">
                              {item.name}
                            </span>
                            <span className="text-[13px] text-gray-500 block">
                              In Stock: {item.quantity}
                            </span>

                            {/* Custom Tooltip */}
                            {hoveredRow === item.stock_id && (
                              <motion.div
                                className="absolute z-10 transition-all duration-300 bg-black text-white text-xs px-2 py-2 rounded shadow-lg -top-9 mt-1 -left-2 max-w-[180px]"
                                initial={{ opacity: 0 }}
                                animate={{ opacity: 1 }}
                                exit={{ opacity: 0 }}
                                transition={{ duration: 0.2 }}
                              >
                                {item.name}
                              </motion.div>
                            )}
                          </div>
                        </td>

                        <td className="text-nowrap">{item.part_number}</td>

                        <td>
                          <div className="rounded-lg p-1 bg-[#e6eaed] flex items-center justify-around select-none">
                            <MinusCircle
                              className="w-4 h-4 hover:text-blue-500 cursor-pointer"
                              onClick={() => decreaseQuantity(item.stock_id)}
                            />
                            <input
                              className="w-12 text-center border rounded border-gray-300 text-sm"
                              value={quantity[item.stock_id] ?? ""}
                              onChange={(e) =>
                                setQuantity((prev) => ({
                                  ...prev,
                                  [item.stock_id]: e.target.value,
                                }))
                              }
                              onBlur={() => {
                                const raw = quantity[item.stock_id];
                                const num = parseInt(raw, 10);
                                if (!isNaN(num) && num > 0) {
                                  setQuantity((prev) => ({
                                    ...prev,
                                    [item.stock_id]: num,
                                  }));
                                  setFormData((prev) => {
                                    const updatedDispatch = prev.dispatch.map(
                                      (dispatchItem) => {
                                        if (
                                          dispatchItem.stock_id ===
                                          item.stock_id
                                        ) {
                                          return {
                                            ...dispatchItem,
                                            quantity: num,
                                          };
                                        }
                                        return dispatchItem;
                                      }
                                    );
                                    return {
                                      ...prev,
                                      dispatch: updatedDispatch,
                                    };
                                  });
                                } else {
                                  removeItem(item.stock_id);
                                }
                              }}
                              style={{
                                MozAppearance: "textfield",
                                WebkitAppearance: "none",
                                appearance: "textfield",
                              }}
                            />
                            <PlusCircle
                              className="w-4 h-4 hover:text-blue-500 cursor-pointer"
                              onClick={() => increaseQuantity(item.stock_id)}
                            />
                          </div>
                        </td>

                        <td>
                          {item.location === "Port Harcourt" ? "PH" : "Onne"}
                        </td>
                        <td>
                          <input className="border w-25 rounded border-gray-200" />
                        </td>
                        <td>
                          <Trash2
                            className="w-[16px] h-[16px] hover:text-red-500 cursor-pointer"
                            onClick={() => removeItem(item.stock_id)}
                          />
                        </td>
                      </motion.tr>
                    ))}
                  </AnimatePresence>
                </tbody>
              </table>
            </div>
          </div>

          <div className="bg-[#f9fafc] p-4 text-sm">
            <div className="space-y-4 bg-white p-4 rounded border border-gray-200">
              {/* Summary Info */}
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="font-medium">
                    {formData.destination_type
                      .toLowerCase()
                      .split(" ")
                      .map(
                        (word) => word.charAt(0).toUpperCase() + word.slice(1)
                      )
                      .join(" ") || "Destination Type"}
                  </span>
                  <span className="text-gray-700">
                    {formData.destination_type === "vessel"
                      ? vessels.find(
                          (v) => v.vessel_id == formData.destination_id
                        )?.vessel_name || "vessel"
                      : departments.find(
                          (d) => d.department_id == formData.destination_id
                        )?.department_name || "dept"}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">Location</span>
                  <span className="text-gray-700">
                    {getLocationSummary(items)}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">Total Items</span>
                  <span className="text-gray-700">{items.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">Total Quantity</span>
                  <span className="text-gray-700">
                    {Object.values(quantity).reduce(
                      (sum, val) => sum + Number(val || 0),
                      0
                    )}
                  </span>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex gap-3 pt-2">
                <button
                  className="bg-gray-100 text-gray-800 border border-gray-300 px-4 py-2 rounded hover:bg-gray-200"
                  onClick={() => {
                    setItems([]);
                    setQuantity({});
                  }}
                >
                  Reset
                </button>

                <button
                  className="bg-blue-100 text-blue-700 border border-blue-300 px-4 py-2 rounded hover:bg-blue-200"
                  onClick={() => window.print()}
                >
                  Print
                </button>

                <button
                  className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
                  onClick={handleSubmit}
                >
                  Add to Dispatch
                </button>

                <button
                  className="bg-yellow-100 text-yellow-700 border border-yellow-300 px-4 py-2 rounded hover:bg-yellow-200"
                  onClick={() => {
                    // optional: export logic or show manifest
                  }}
                >
                  Preview Manifest
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SIS;
